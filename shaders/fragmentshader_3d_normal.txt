#version 410

uniform vec3 light_color;
uniform sampler2DArray normal_texture_array;

//in vec3 vertex_position;
in vec4 vertex_color;
in vec2 tex_coord;
in float current_layer;
in vec3 tangent_light_position;
in vec3 tangent_view_position;
in vec3 tangent_vertex_position;

out vec4 frag_color;


void main(void) {
	vec3 normal= texture(normal_texture_array, vec3(tex_coord.x, tex_coord.y, current_layer)).rgb;
	normal= normalize(normal* 2.0- 1.0);
	
	// ambient
	float ambient_strength= 0.1;
	vec3 ambient= ambient_strength * light_color;

	// diffuse
	vec3 light_direction= normalize(tangent_light_position- tangent_vertex_position);
	float diff= max(dot(normal, light_direction), 0.0);
	vec3 diffuse= diff* light_color;

	// specular
	float specular_strength= 0.5;
	vec3 view_direction= normalize(tangent_view_position- tangent_vertex_position);
	vec3 reflection_direction= reflect(-light_direction, normal);
	float spec= pow(max(dot(view_direction, reflection_direction), 0.0), 32);
	vec3 specular= specular_strength* spec* light_color;
	
	vec3 result= (ambient+ diffuse+ specular)* vec3(vertex_color);
	
	//vec3 result= (ambient+ diffuse)* vec3(vertex_color);
	//vec3 result= (specular)* vec3(vertex_color);
	//vec3 result= vec3(texture(normal_texture_array, vec3(tex_coord.x, tex_coord.y, current_layer)));
	//vec3 result= vec3(texture(normal_texture_array, vec3(0.0, 0.0, 0.0)));
	//vec3 result= vec3(tex_coord.x, tex_coord.y, current_layer);
	
	frag_color= vec4(result, 1.0);
}
