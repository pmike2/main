// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "a2v_interface.h"

A2VInterface::A2VInterface() {
  { main_window = new Fl_Double_Window(868, 486, "A2V");
    main_window->user_data((void*)(this));
    main_window->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { tree_a2v = new Fl_Tree(10, 160, 165, 275);
    } // Fl_Tree* tree_a2v
    { load_a2v = new Fl_Button(10, 5, 70, 25, "Load A2V");
    } // Fl_Button* load_a2v
    { active = new Fl_Check_Button(572, 89, 70, 30, "Active");
      active->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* active
    { delete_action = new Fl_Button(185, 95, 90, 25, "Delete Action");
    } // Fl_Button* delete_action
    { add_action_choice = new Fl_Input_Choice(90, 95, 90, 25);
    } // Fl_Input_Choice* add_action_choice
    { add_action = new Fl_Button(10, 95, 75, 25, "Add Action");
    } // Fl_Button* add_action
    { randomize_a2v = new Fl_Button(170, 5, 90, 25, "Random A2V");
    } // Fl_Button* randomize_a2v
    { randomize_channel = new Fl_Button(210, 35, 115, 25, "Random Channel");
    } // Fl_Button* randomize_channel
    { load_channel = new Fl_Button(10, 35, 95, 25, "Load Channel");
    } // Fl_Button* load_channel
    { save_channel = new Fl_Button(110, 35, 95, 25, "Save Channel");
    } // Fl_Button* save_channel
    { load_action = new Fl_Button(10, 65, 85, 25, "Load Action");
    } // Fl_Button* load_action
    { save_action = new Fl_Button(100, 65, 85, 25, "Save Action");
    } // Fl_Button* save_action
    { randomize_action = new Fl_Button(190, 65, 105, 25, "Random Action");
    } // Fl_Button* randomize_action
    { save_a2v = new Fl_Button(85, 5, 80, 25, "Save A2V");
    } // Fl_Button* save_a2v
    { group_model_obj = new Fl_Group(180, 135, 670, 340, "Model Obj");
      group_model_obj->box(FL_UP_BOX);
      group_model_obj->hide();
      { model_obj_init_values_model2world = new Table4X4(185, 202, 315, 100, "Model2World");
        model_obj_init_values_model2world->box(FL_UP_BOX);
        model_obj_init_values_model2world->color(FL_BACKGROUND_COLOR);
        model_obj_init_values_model2world->selection_color(FL_BACKGROUND_COLOR);
        model_obj_init_values_model2world->labeltype(FL_NORMAL_LABEL);
        model_obj_init_values_model2world->labelfont(0);
        model_obj_init_values_model2world->labelsize(14);
        model_obj_init_values_model2world->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_init_values_model2world->align(Fl_Align(FL_ALIGN_TOP));
        model_obj_init_values_model2world->when(FL_WHEN_RELEASE);
        model_obj_init_values_model2world->end();
      } // Table4X4* model_obj_init_values_model2world
      { model_obj_init_values_ambient = new Vec3(190, 359, 80, 74, "Ambient");
        model_obj_init_values_ambient->box(FL_UP_BOX);
        model_obj_init_values_ambient->color(FL_BACKGROUND_COLOR);
        model_obj_init_values_ambient->selection_color(FL_BACKGROUND_COLOR);
        model_obj_init_values_ambient->labeltype(FL_NORMAL_LABEL);
        model_obj_init_values_ambient->labelfont(0);
        model_obj_init_values_ambient->labelsize(14);
        model_obj_init_values_ambient->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_init_values_ambient->align(Fl_Align(FL_ALIGN_TOP));
        model_obj_init_values_ambient->when(FL_WHEN_RELEASE);
        model_obj_init_values_ambient->end();
      } // Vec3* model_obj_init_values_ambient
      { model_obj_init_values_diffuse = new Vec3(290, 359, 80, 74, "Diffuse");
        model_obj_init_values_diffuse->box(FL_UP_BOX);
        model_obj_init_values_diffuse->color(FL_BACKGROUND_COLOR);
        model_obj_init_values_diffuse->selection_color(FL_BACKGROUND_COLOR);
        model_obj_init_values_diffuse->labeltype(FL_NORMAL_LABEL);
        model_obj_init_values_diffuse->labelfont(0);
        model_obj_init_values_diffuse->labelsize(14);
        model_obj_init_values_diffuse->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_init_values_diffuse->align(Fl_Align(FL_ALIGN_TOP));
        model_obj_init_values_diffuse->when(FL_WHEN_RELEASE);
        model_obj_init_values_diffuse->end();
      } // Vec3* model_obj_init_values_diffuse
      { model_obj_final_values_model2world = new Table4X4(520, 202, 320, 100, "Model2World");
        model_obj_final_values_model2world->box(FL_UP_BOX);
        model_obj_final_values_model2world->color(FL_BACKGROUND_COLOR);
        model_obj_final_values_model2world->selection_color(FL_BACKGROUND_COLOR);
        model_obj_final_values_model2world->labeltype(FL_NORMAL_LABEL);
        model_obj_final_values_model2world->labelfont(0);
        model_obj_final_values_model2world->labelsize(14);
        model_obj_final_values_model2world->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_final_values_model2world->align(Fl_Align(FL_ALIGN_TOP));
        model_obj_final_values_model2world->when(FL_WHEN_RELEASE);
        model_obj_final_values_model2world->end();
      } // Table4X4* model_obj_final_values_model2world
      { model_obj_final_values_ambient = new Vec3(523, 360, 80, 74, "Ambient");
        model_obj_final_values_ambient->box(FL_UP_BOX);
        model_obj_final_values_ambient->color(FL_BACKGROUND_COLOR);
        model_obj_final_values_ambient->selection_color(FL_BACKGROUND_COLOR);
        model_obj_final_values_ambient->labeltype(FL_NORMAL_LABEL);
        model_obj_final_values_ambient->labelfont(0);
        model_obj_final_values_ambient->labelsize(14);
        model_obj_final_values_ambient->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_final_values_ambient->align(Fl_Align(FL_ALIGN_TOP));
        model_obj_final_values_ambient->when(FL_WHEN_RELEASE);
        model_obj_final_values_ambient->end();
      } // Vec3* model_obj_final_values_ambient
      { model_obj_final_values_diffuse = new Vec3(625, 359, 80, 74, "Diffuse");
        model_obj_final_values_diffuse->box(FL_UP_BOX);
        model_obj_final_values_diffuse->color(FL_BACKGROUND_COLOR);
        model_obj_final_values_diffuse->selection_color(FL_BACKGROUND_COLOR);
        model_obj_final_values_diffuse->labeltype(FL_NORMAL_LABEL);
        model_obj_final_values_diffuse->labelfont(0);
        model_obj_final_values_diffuse->labelsize(14);
        model_obj_final_values_diffuse->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_final_values_diffuse->align(Fl_Align(FL_ALIGN_TOP));
        model_obj_final_values_diffuse->when(FL_WHEN_RELEASE);
        model_obj_final_values_diffuse->end();
      } // Vec3* model_obj_final_values_diffuse
      { model_obj_init_values_transfo_choice = new Fl_Input_Choice(186, 311, 105, 25);
      } // Fl_Input_Choice* model_obj_init_values_transfo_choice
      { model_obj_init_values_transfo_value = new Fl_Float_Input(301, 311, 65, 25);
        model_obj_init_values_transfo_value->box(FL_DOWN_BOX);
        model_obj_init_values_transfo_value->color(FL_BACKGROUND2_COLOR);
        model_obj_init_values_transfo_value->selection_color(FL_SELECTION_COLOR);
        model_obj_init_values_transfo_value->labeltype(FL_NORMAL_LABEL);
        model_obj_init_values_transfo_value->labelfont(0);
        model_obj_init_values_transfo_value->labelsize(14);
        model_obj_init_values_transfo_value->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_init_values_transfo_value->align(Fl_Align(FL_ALIGN_LEFT));
        model_obj_init_values_transfo_value->when(FL_WHEN_CHANGED);
      } // Fl_Float_Input* model_obj_init_values_transfo_value
      { model_obj_final_values_transfo_choice = new Fl_Input_Choice(521, 309, 105, 25);
      } // Fl_Input_Choice* model_obj_final_values_transfo_choice
      { model_obj_final_values_transfo_value = new Fl_Float_Input(636, 309, 65, 25);
        model_obj_final_values_transfo_value->box(FL_DOWN_BOX);
        model_obj_final_values_transfo_value->color(FL_BACKGROUND2_COLOR);
        model_obj_final_values_transfo_value->selection_color(FL_SELECTION_COLOR);
        model_obj_final_values_transfo_value->labeltype(FL_NORMAL_LABEL);
        model_obj_final_values_transfo_value->labelfont(0);
        model_obj_final_values_transfo_value->labelsize(14);
        model_obj_final_values_transfo_value->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_final_values_transfo_value->align(Fl_Align(FL_ALIGN_LEFT));
        model_obj_final_values_transfo_value->when(FL_WHEN_CHANGED);
      } // Fl_Float_Input* model_obj_final_values_transfo_value
      { model_obj_init_values_transfo_ok = new Fl_Button(376, 311, 25, 25, "OK");
      } // Fl_Button* model_obj_init_values_transfo_ok
      { model_obj_final_values_transfo_ok = new Fl_Button(711, 309, 25, 25, "OK");
      } // Fl_Button* model_obj_final_values_transfo_ok
      { model_obj_ch_obj = new Fl_Input_Choice(230, 145, 210, 25, "ch_obj");
      } // Fl_Input_Choice* model_obj_ch_obj
      { model_obj_ch_mat = new Fl_Input_Choice(505, 145, 210, 25, "ch_mat");
      } // Fl_Input_Choice* model_obj_ch_mat
      { model_obj_alpha_graph = new TimeGraph(380, 370, 130, 65, "Alpha");
        model_obj_alpha_graph->box(FL_UP_BOX);
        model_obj_alpha_graph->color(FL_BACKGROUND_COLOR);
        model_obj_alpha_graph->selection_color(FL_BACKGROUND_COLOR);
        model_obj_alpha_graph->labeltype(FL_NORMAL_LABEL);
        model_obj_alpha_graph->labelfont(0);
        model_obj_alpha_graph->labelsize(14);
        model_obj_alpha_graph->labelcolor(FL_FOREGROUND_COLOR);
        model_obj_alpha_graph->align(Fl_Align(FL_ALIGN_TOP));
        model_obj_alpha_graph->when(FL_WHEN_RELEASE);
        model_obj_alpha_graph->end();
      } // TimeGraph* model_obj_alpha_graph
      { model_obj_alpha_graph_ok = new Fl_Button(485, 440, 25, 25, "OK");
      } // Fl_Button* model_obj_alpha_graph_ok
      { model_obj_init_values_shininess = new Fl_Value_Slider(190, 435, 145, 25, "Shininess");
        model_obj_init_values_shininess->type(1);
        model_obj_init_values_shininess->maximum(100);
        model_obj_init_values_shininess->step(1);
        model_obj_init_values_shininess->value(20);
        model_obj_init_values_shininess->when(FL_WHEN_RELEASE);
      } // Fl_Value_Slider* model_obj_init_values_shininess
      { model_obj_final_values_shininess = new Fl_Value_Slider(525, 435, 145, 25, "Shininess");
        model_obj_final_values_shininess->type(1);
        model_obj_final_values_shininess->maximum(100);
        model_obj_final_values_shininess->step(1);
        model_obj_final_values_shininess->value(20);
        model_obj_final_values_shininess->when(FL_WHEN_RELEASE);
      } // Fl_Value_Slider* model_obj_final_values_shininess
      group_model_obj->end();
    } // Fl_Group* group_model_obj
    { group_light = new Fl_Group(180, 135, 435, 230, "Light");
      group_light->box(FL_UP_BOX);
      group_light->hide();
      { light_init_values_color = new Vec3(195, 153, 80, 75, "Color");
        light_init_values_color->box(FL_UP_BOX);
        light_init_values_color->color(FL_BACKGROUND_COLOR);
        light_init_values_color->selection_color(FL_BACKGROUND_COLOR);
        light_init_values_color->labeltype(FL_NORMAL_LABEL);
        light_init_values_color->labelfont(0);
        light_init_values_color->labelsize(14);
        light_init_values_color->labelcolor(FL_FOREGROUND_COLOR);
        light_init_values_color->align(Fl_Align(FL_ALIGN_TOP));
        light_init_values_color->when(FL_WHEN_RELEASE);
        light_init_values_color->end();
      } // Vec3* light_init_values_color
      { light_init_values_position_world = new Vec4(195, 250, 80, 100, "PositionWorld");
        light_init_values_position_world->box(FL_UP_BOX);
        light_init_values_position_world->color(FL_BACKGROUND_COLOR);
        light_init_values_position_world->selection_color(FL_BACKGROUND_COLOR);
        light_init_values_position_world->labeltype(FL_NORMAL_LABEL);
        light_init_values_position_world->labelfont(0);
        light_init_values_position_world->labelsize(14);
        light_init_values_position_world->labelcolor(FL_FOREGROUND_COLOR);
        light_init_values_position_world->align(Fl_Align(FL_ALIGN_TOP));
        light_init_values_position_world->when(FL_WHEN_RELEASE);
        light_init_values_position_world->end();
      } // Vec4* light_init_values_position_world
      { light_init_values_spot_cone_direction_world = new Vec3(295, 275, 80, 75, "SpotDirection");
        light_init_values_spot_cone_direction_world->box(FL_UP_BOX);
        light_init_values_spot_cone_direction_world->color(FL_BACKGROUND_COLOR);
        light_init_values_spot_cone_direction_world->selection_color(FL_BACKGROUND_COLOR);
        light_init_values_spot_cone_direction_world->labeltype(FL_NORMAL_LABEL);
        light_init_values_spot_cone_direction_world->labelfont(0);
        light_init_values_spot_cone_direction_world->labelsize(14);
        light_init_values_spot_cone_direction_world->labelcolor(FL_FOREGROUND_COLOR);
        light_init_values_spot_cone_direction_world->align(Fl_Align(FL_ALIGN_TOP));
        light_init_values_spot_cone_direction_world->when(FL_WHEN_RELEASE);
        light_init_values_spot_cone_direction_world->end();
      } // Vec3* light_init_values_spot_cone_direction_world
      { light_final_values_color = new Vec3(420, 154, 80, 76, "Color");
        light_final_values_color->box(FL_UP_BOX);
        light_final_values_color->color(FL_BACKGROUND_COLOR);
        light_final_values_color->selection_color(FL_BACKGROUND_COLOR);
        light_final_values_color->labeltype(FL_NORMAL_LABEL);
        light_final_values_color->labelfont(0);
        light_final_values_color->labelsize(14);
        light_final_values_color->labelcolor(FL_FOREGROUND_COLOR);
        light_final_values_color->align(Fl_Align(FL_ALIGN_TOP));
        light_final_values_color->when(FL_WHEN_RELEASE);
        light_final_values_color->end();
      } // Vec3* light_final_values_color
      { light_final_values_position_world = new Vec4(420, 251, 80, 99, "PositionWorld");
        light_final_values_position_world->box(FL_UP_BOX);
        light_final_values_position_world->color(FL_BACKGROUND_COLOR);
        light_final_values_position_world->selection_color(FL_BACKGROUND_COLOR);
        light_final_values_position_world->labeltype(FL_NORMAL_LABEL);
        light_final_values_position_world->labelfont(0);
        light_final_values_position_world->labelsize(14);
        light_final_values_position_world->labelcolor(FL_FOREGROUND_COLOR);
        light_final_values_position_world->align(Fl_Align(FL_ALIGN_TOP));
        light_final_values_position_world->when(FL_WHEN_RELEASE);
        light_final_values_position_world->end();
      } // Vec4* light_final_values_position_world
      { light_final_values_spot_cone_direction_world = new Vec3(518, 275, 80, 75, "SpotDirection");
        light_final_values_spot_cone_direction_world->box(FL_UP_BOX);
        light_final_values_spot_cone_direction_world->color(FL_BACKGROUND_COLOR);
        light_final_values_spot_cone_direction_world->selection_color(FL_BACKGROUND_COLOR);
        light_final_values_spot_cone_direction_world->labeltype(FL_NORMAL_LABEL);
        light_final_values_spot_cone_direction_world->labelfont(0);
        light_final_values_spot_cone_direction_world->labelsize(14);
        light_final_values_spot_cone_direction_world->labelcolor(FL_FOREGROUND_COLOR);
        light_final_values_spot_cone_direction_world->align(Fl_Align(FL_ALIGN_TOP));
        light_final_values_spot_cone_direction_world->when(FL_WHEN_RELEASE);
        light_final_values_spot_cone_direction_world->end();
      } // Vec3* light_final_values_spot_cone_direction_world
      group_light->end();
    } // Fl_Group* group_light
    { group_vmat = new Fl_Group(185, 138, 675, 299, "VMat");
      group_vmat->box(FL_UP_BOX);
      group_vmat->hide();
      { vmat_init_values_mat = new Table4X4(195, 163, 320, 100, "Mat");
        vmat_init_values_mat->box(FL_UP_BOX);
        vmat_init_values_mat->color(FL_BACKGROUND_COLOR);
        vmat_init_values_mat->selection_color(FL_BACKGROUND_COLOR);
        vmat_init_values_mat->labeltype(FL_NORMAL_LABEL);
        vmat_init_values_mat->labelfont(0);
        vmat_init_values_mat->labelsize(14);
        vmat_init_values_mat->labelcolor(FL_FOREGROUND_COLOR);
        vmat_init_values_mat->align(Fl_Align(FL_ALIGN_TOP));
        vmat_init_values_mat->when(FL_WHEN_RELEASE);
        vmat_init_values_mat->end();
      } // Table4X4* vmat_init_values_mat
      { vmat_final_values_mat = new Table4X4(528, 163, 317, 100, "Mat");
        vmat_final_values_mat->box(FL_UP_BOX);
        vmat_final_values_mat->color(FL_BACKGROUND_COLOR);
        vmat_final_values_mat->selection_color(FL_BACKGROUND_COLOR);
        vmat_final_values_mat->labeltype(FL_NORMAL_LABEL);
        vmat_final_values_mat->labelfont(0);
        vmat_final_values_mat->labelsize(14);
        vmat_final_values_mat->labelcolor(FL_FOREGROUND_COLOR);
        vmat_final_values_mat->align(Fl_Align(FL_ALIGN_TOP));
        vmat_final_values_mat->when(FL_WHEN_RELEASE);
        vmat_final_values_mat->end();
      } // Table4X4* vmat_final_values_mat
      { vmat_init_values_transfo_choice = new Fl_Input_Choice(196, 275, 105, 25);
      } // Fl_Input_Choice* vmat_init_values_transfo_choice
      { vmat_init_values_transfo_value = new Fl_Float_Input(311, 275, 65, 25);
        vmat_init_values_transfo_value->box(FL_DOWN_BOX);
        vmat_init_values_transfo_value->color(FL_BACKGROUND2_COLOR);
        vmat_init_values_transfo_value->selection_color(FL_SELECTION_COLOR);
        vmat_init_values_transfo_value->labeltype(FL_NORMAL_LABEL);
        vmat_init_values_transfo_value->labelfont(0);
        vmat_init_values_transfo_value->labelsize(14);
        vmat_init_values_transfo_value->labelcolor(FL_FOREGROUND_COLOR);
        vmat_init_values_transfo_value->align(Fl_Align(FL_ALIGN_LEFT));
        vmat_init_values_transfo_value->when(FL_WHEN_CHANGED);
      } // Fl_Float_Input* vmat_init_values_transfo_value
      { vmat_init_values_transfo_ok = new Fl_Button(384, 275, 25, 25, "OK");
      } // Fl_Button* vmat_init_values_transfo_ok
      { vmat_final_values_transfo_choice = new Fl_Input_Choice(529, 275, 105, 25);
      } // Fl_Input_Choice* vmat_final_values_transfo_choice
      { vmat_final_values_transfo_value = new Fl_Float_Input(644, 275, 65, 25);
        vmat_final_values_transfo_value->box(FL_DOWN_BOX);
        vmat_final_values_transfo_value->color(FL_BACKGROUND2_COLOR);
        vmat_final_values_transfo_value->selection_color(FL_SELECTION_COLOR);
        vmat_final_values_transfo_value->labeltype(FL_NORMAL_LABEL);
        vmat_final_values_transfo_value->labelfont(0);
        vmat_final_values_transfo_value->labelsize(14);
        vmat_final_values_transfo_value->labelcolor(FL_FOREGROUND_COLOR);
        vmat_final_values_transfo_value->align(Fl_Align(FL_ALIGN_LEFT));
        vmat_final_values_transfo_value->when(FL_WHEN_CHANGED);
      } // Fl_Float_Input* vmat_final_values_transfo_value
      { vmat_final_values_transfo_ok = new Fl_Button(716, 274, 25, 25, "OK");
      } // Fl_Button* vmat_final_values_transfo_ok
      { vmat_alpha_graph = new TimeGraph(195, 320, 130, 65, "Alpha");
        vmat_alpha_graph->box(FL_UP_BOX);
        vmat_alpha_graph->color(FL_BACKGROUND_COLOR);
        vmat_alpha_graph->selection_color(FL_BACKGROUND_COLOR);
        vmat_alpha_graph->labeltype(FL_NORMAL_LABEL);
        vmat_alpha_graph->labelfont(0);
        vmat_alpha_graph->labelsize(14);
        vmat_alpha_graph->labelcolor(FL_FOREGROUND_COLOR);
        vmat_alpha_graph->align(Fl_Align(FL_ALIGN_TOP));
        vmat_alpha_graph->when(FL_WHEN_RELEASE);
        vmat_alpha_graph->end();
      } // TimeGraph* vmat_alpha_graph
      { vmat_alpha_graph_ok = new Fl_Button(330, 356, 25, 29, "OK");
      } // Fl_Button* vmat_alpha_graph_ok
      group_vmat->end();
    } // Fl_Group* group_vmat
    { defaultize_action = new Fl_Button(300, 65, 95, 25, "Default Action");
    } // Fl_Button* defaultize_action
    { defaultize_channel = new Fl_Button(330, 35, 115, 25, "Default Channel");
    } // Fl_Button* defaultize_channel
    { defaultize_a2v = new Fl_Button(265, 5, 90, 25, "Default A2V");
    } // Fl_Button* defaultize_a2v
    { copy_init2final = new Fl_Button(768, 90, 80, 27, "init -> final");
    } // Fl_Button* copy_init2final
    { morph_graph = new TimeGraph(685, 20, 130, 65, "Morph");
      morph_graph->box(FL_UP_BOX);
      morph_graph->color(FL_BACKGROUND_COLOR);
      morph_graph->selection_color(FL_BACKGROUND_COLOR);
      morph_graph->labeltype(FL_NORMAL_LABEL);
      morph_graph->labelfont(0);
      morph_graph->labelsize(14);
      morph_graph->labelcolor(FL_FOREGROUND_COLOR);
      morph_graph->align(Fl_Align(FL_ALIGN_TOP));
      morph_graph->when(FL_WHEN_RELEASE);
      morph_graph->end();
    } // TimeGraph* morph_graph
    { morph_graph_ok = new Fl_Button(820, 20, 25, 25, "OK");
    } // Fl_Button* morph_graph_ok
    { enable_all_choice = new Fl_Input_Choice(120, 125, 55, 25);
    } // Fl_Input_Choice* enable_all_choice
    { enable_all = new Fl_Button(10, 125, 50, 25, "Enable");
    } // Fl_Button* enable_all
    { disable_all = new Fl_Button(65, 125, 50, 25, "Disable");
    } // Fl_Button* disable_all
    { retrig = new Fl_Check_Button(570, 60, 70, 30, "Retrig");
      retrig->down_box(FL_DOWN_BOX);
    } // Fl_Check_Button* retrig
    { lifetime = new Fl_Value_Slider(635, 90, 125, 25, "Lifetime");
      lifetime->type(1);
      lifetime->minimum(10);
      lifetime->maximum(10000);
      lifetime->step(10);
      lifetime->value(1000);
      lifetime->when(FL_WHEN_RELEASE);
    } // Fl_Value_Slider* lifetime
    main_window->end();
  } // Fl_Double_Window* main_window
}
